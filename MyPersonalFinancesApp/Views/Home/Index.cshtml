@model FinanceManager.Models.DashboardViewModel
@using System.Text.Json;
@{
    ViewData["Title"] = "Dashboard";
    var expenseChartData = JsonSerializer.Serialize(Model.ExpenseChartData);
    var incomeChartData = JsonSerializer.Serialize(Model.IncomeChartData);
}

<!-- Account Filter Dropdown -->
<div class="row justify-content-center mb-4">
    <div class="col-md-4">
        <!-- REMOVE the onchange attribute from the form tag -->
        <form asp-action="Index" method="get" id="accountFilterForm">
            <div class="input-group">
                <label class="input-group-text" for="accountIdSelect">Account:</label>
                <!-- REMOVE the onchange attribute from the select tag as well -->
                <select asp-for="SelectedAccountId" class="form-select" id="accountIdSelect">
                    <option value="">General (All Accounts)</option>

                    <!-- Loop through user's accounts -->
                    @foreach (var account in Model.Accounts)
                    {
                        <option value="@account.Value" selected="@(Model.SelectedAccountId.ToString() == account.Value)">
                            @account.Text
                        </option>
                    }

                    <!-- Add the separator and New Account at the end -->
                    <option disabled>------------------</option>
                    <option value="create_new">+ New Account</option>
                </select>
            </div>
        </form>
    </div>
</div>

<div class="row">
    <!-- WEST SIDE: Expenses -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header text-center">
                <h3>Expenses</h3>
            </div>
            <div class="card-body">
                <div class="pie-chart-container">
                    <canvas id="expenseChart"></canvas>
                    @if (!Model.ExpenseChartData.Values.Any())
                    {
                        <a asp-controller="Transaction" asp-action="Create" asp-route-type="Expense" class="create-transaction-btn">+</a>
                    }
                </div>
                <hr />
                <h5 class="mt-4">Recent Expenses</h5>
                @if (Model.RecentExpenses.Any())
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var expense in Model.RecentExpenses)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@expense.Category.Name</strong>
                                    <small class="d-block text-muted">@expense.Date.ToShortDateString()</small>
                                </div>
                                <span class="badge bg-danger rounded-pill">-@expense.Amount.ToString("C")</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-center text-muted">No recent expenses found.</p>
                }
            </div>
        </div>
    </div>

    <!-- EAST SIDE: Income -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header text-center">
                <h3>Income</h3>
            </div>
            <div class="card-body">
                <div class="pie-chart-container">
                    <canvas id="incomeChart"></canvas>
                    @if (!Model.IncomeChartData.Values.Any())
                    {
                        <a asp-controller="Transaction" asp-action="Create" asp-route-type="Income" class="create-transaction-btn">+</a>
                    }
                </div>
                <hr />
                <h5 class="mt-4">Recent Income</h5>
                @if (Model.RecentIncomes.Any())
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var income in Model.RecentIncomes)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@income.Category.Name</strong>
                                    <small class="d-block text-muted">@income.Date.ToShortDateString()</small>
                                </div>
                                <span class="badge bg-success rounded-pill">+@income.Amount.ToString("C")</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-center text-muted">No recent income found.</p>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // --- Reusable function for the placeholder chart ---
        function createPlaceholderChart(canvasId) {
            // ... (this function remains the same as before)
        }

        // --- CUSTOM CHART.JS PLUGIN to draw text in the center ---
        const doughnutCenterText = {
            id: 'doughnutCenterText',
            afterDraw: (chart) => {
                if (chart.options.plugins.doughnutCenterText.text) {
                    const ctx = chart.ctx;
                    const text = chart.options.plugins.doughnutCenterText.text;
                    const textMetrics = ctx.measureText(text);

                    const x = (chart.chartArea.left + chart.chartArea.right) / 2;
                    const y = (chart.chartArea.top + chart.chartArea.bottom) / 2;

                    ctx.save();
                    ctx.font = 'bold 1.2em sans-serif';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = '#6c757d'; // Bootstrap secondary color
                    ctx.fillText(text, x, y);
                    ctx.restore();
                }
            }
        };

        document.addEventListener('DOMContentLoaded', function () {
            // --- Expense Chart ---
            const expenseData = @Html.Raw(JsonSerializer.Serialize(Model.ExpenseChartData));
            if (expenseData.Values.length > 0) {
                const defaultExpenseText = expenseData.Labels[0]; // The first item is the largest
                const expenseCtx = document.getElementById('expenseChart').getContext('2d');
                const expenseChart = new Chart(expenseCtx, {
                    type: 'doughnut',
                    plugins: [doughnutCenterText], // <-- Register the custom plugin
                    data: {
                        labels: expenseData.Labels,
                        datasets: [{
                            data: expenseData.Values,
                            backgroundColor: expenseData.Colors,
                            borderWidth: 2
                        }]
                    },
                    options: {
                        cutout: '70%', // Makes the doughnut hole larger
                        plugins: {
                            legend: { display: false },
                            doughnutCenterText: { text: defaultExpenseText } // Set the default text
                        },
                        onHover: (event, chartElement) => {
                            if (chartElement.length) {
                                const index = chartElement[0].index;
                                const label = expenseChart.data.labels[index];
                                expenseChart.options.plugins.doughnutCenterText.text = label;
                            } else {
                                // When mouse leaves, reset to default
                                expenseChart.options.plugins.doughnutCenterText.text = defaultExpenseText;
                            }
                            expenseChart.update();
                        }
                    }
                });
            } else {
                createPlaceholderChart('expenseChart');
            }

            // --- Income Chart ---
            const incomeData = @Html.Raw(JsonSerializer.Serialize(Model.IncomeChartData));
            if (incomeData.Values.length > 0) {
                 const defaultIncomeText = incomeData.Labels[0]; // The first item is the largest
                 const incomeCtx = document.getElementById('incomeChart').getContext('2d');
                 const incomeChart = new Chart(incomeCtx, {
                    type: 'doughnut',
                    plugins: [doughnutCenterText], // <-- Register the custom plugin
                    data: {
                        labels: incomeData.Labels,
                        datasets: [{
                            data: incomeData.Values,
                            backgroundColor: incomeData.Colors,
                            borderWidth: 2
                        }]
                    },
                    options: {
                        cutout: '70%',
                        plugins: {
                            legend: { display: false },
                            doughnutCenterText: { text: defaultIncomeText }
                        },
                         onHover: (event, chartElement) => {
                             if (chartElement.length) {
                                 const index = chartElement[0].index;
                                 const label = incomeChart.data.labels[index];
                                 incomeChart.options.plugins.doughnutCenterText.text = label;
                             } else {
                                 incomeChart.options.plugins.doughnutCenterText.text = defaultIncomeText;
                             }
                             incomeChart.update();
                         }
                    }
                });
            } else {
                createPlaceholderChart('incomeChart');
            }
        });
    </script>
}
