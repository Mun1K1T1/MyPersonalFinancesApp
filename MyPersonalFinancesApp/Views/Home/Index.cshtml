@model FinanceManager.Models.DashboardViewModel
@using System.Text.Json;
@{
    ViewData["Title"] = "Dashboard";
}

<!-- MASTER FILTER FORM -->
<form asp-action="Index" method="get" id="filterForm">
    <!-- Account Filter Dropdown -->
    <div class="row justify-content-center mb-4">
        <div class="col-md-4">
            <div class="input-group">
                <label class="input-group-text">Account:</label>
                <select asp-for="SelectedAccountId" class="form-select" id="accountIdSelect">
                    <option value="">General (All Accounts)</option>
                    @if (Model.Accounts != null)
                    {
                        @foreach (var account in Model.Accounts)
                        {
                            <option value="@account.Value" selected="@(Model.SelectedAccountId.ToString() == account.Value)">@account.Text</option>
                        }
                    }
                    <option disabled>------------------</option>
                    <option value="create_new">+ New Account</option>
                </select>
            </div>
        </div>
    </div>

    <!-- CURRENT AMOUNT & TIME FILTER BOX -->
    <div class="dashboard-box text-center mb-4">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h5 class="text-muted">CURRENT AMOUNT</h5>
                <h2>@Model.CurrentAmount.ToString("C")</h2>
            </div>
            <div class="col-md-4">
                <div class="input-group">
                    <label class="input-group-text">Period:</label>
                    <select asp-for="SelectedTimePeriod" asp-items="Html.GetEnumSelectList<TimePeriod>()" class="form-select" id="timePeriodSelect"></select>
                </div>
            </div>
        </div>
    </div>
</form>

<div class="row">
    <!-- WEST SIDE: Expenses -->
    <div class="col-md-6 mb-4">
        <div class="dashboard-box chart-box">
            <h3 class="text-center">Expenses</h3>
            <div class="pie-chart-container">
                <canvas id="expenseChart"></canvas>
            </div>
            <a asp-controller="Transaction" asp-action="Create" asp-route-type="Expense" class="create-transaction-btn">+</a>
        </div>
        <div class="dashboard-box mt-3">
            <h5 class="mt-1">Recent Expenses</h5>
            <a asp-controller="Transaction" asp-action="Index" asp-route-type="Expense" class="stretched-link"></a>
            @if (Model.RecentExpenses.Any())
            {
                <ul class="list-group list-group-flush">
                    @foreach (var expense in Model.RecentExpenses)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div><strong>@expense.Category.Name</strong><small class="d-block text-muted">@expense.Date.ToShortDateString()</small></div>
                            <span class="badge bg-danger rounded-pill">-@expense.Amount.ToString("C")</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-center text-muted mt-3">No expenses found for this period.</p>
            }

            @if (Model.TotalExpenseCountForPeriod > 20)
            {
                <div class="text-center text-muted mt-2">
                    ... and @(Model.TotalExpenseCountForPeriod - 20) more
                </div>
            }
        </div>
    </div>

    <!-- EAST SIDE: Income -->
    <div class="col-md-6 mb-4">
        <div class="dashboard-box chart-box">
            <h3 class="text-center">Income</h3>
            <div class="pie-chart-container">
                <canvas id="incomeChart"></canvas>
            </div>
            <a asp-controller="Transaction" asp-action="Create" asp-route-type="Income" class="create-transaction-btn">+</a>
        </div>
        <div class="dashboard-box mt-3">
            <h5 class="mt-1">Recent Income</h5>
            <a asp-controller="Transaction" asp-action="Index" asp-route-type="Income" class="stretched-link"></a>
            @if (Model.RecentIncomes.Any())
            {
                <ul class="list-group list-group-flush">
                    @foreach (var income in Model.RecentIncomes)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div><strong>@income.Category.Name</strong><small class="d-block text-muted">@income.Date.ToShortDateString()</small></div>
                            <span class="badge bg-success rounded-pill">+@income.Amount.ToString("C")</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-center text-muted mt-3">No income found for this period.</p>
            }

            @if (Model.TotalIncomeCountForPeriod > 20)
            {
                <div class="text-center text-muted mt-2">
                    ... and @(Model.TotalIncomeCountForPeriod - 20) more
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // --- Reusable function for the placeholder chart ---
        function createPlaceholderChart(canvasId) {
            const ctx = document.getElementById(canvasId).getContext('2d');
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['No Data'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#E9ECEF'],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: { enabled: false },
                        legend: { display: false }
                    }
                }
            });
        }

        // --- CUSTOM CHART.JS PLUGIN to draw text in the center ---
        const doughnutCenterText = {
            id: 'doughnutCenterText',
            afterDraw: (chart) => {
                if (chart.options.plugins.doughnutCenterText.text) {
                    const ctx = chart.ctx;
                    const text = chart.options.plugins.doughnutCenterText.text;
                    const x = (chart.chartArea.left + chart.chartArea.right) / 2;
                    const y = (chart.chartArea.top + chart.chartArea.bottom) / 2;

                    ctx.save();
                    ctx.font = 'bold 1.2em sans-serif';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = '#6c757d';
                    ctx.fillText(text, x, y);
                    ctx.restore();
                }
            }
        };

        // --- SINGLE DOMContentLoaded LISTENER ---
        document.addEventListener('DOMContentLoaded', function () {

            // --- LOGIC FROM SCRIPT 2: FORM FILTER HANDLING ---
            const accountSelect = document.getElementById('accountIdSelect');
            const timePeriodSelect = document.getElementById('timePeriodSelect');
            const filterForm = document.getElementById('filterForm');

            function submitForm() {
                filterForm.submit();
            }

            if (accountSelect) {
                accountSelect.addEventListener('change', function () {
                    if (this.value === 'create_new') {
                        window.location.href = '@Url.Action("Create", "AccountSetup")';
                    } else {
                        submitForm();
                    }
                });
            }
            if (timePeriodSelect) {
                timePeriodSelect.addEventListener('change', submitForm);
            }

            // --- LOGIC FROM SCRIPT 1: CHART RENDERING ---
            // --- Expense Chart ---
            const expenseData = @Html.Raw(JsonSerializer.Serialize(Model.ExpenseChartData));
            if (expenseData.Values.length > 0) {
                const defaultExpenseText = expenseData.Labels[0];
                const expenseCtx = document.getElementById('expenseChart').getContext('2d');
                const expenseChart = new Chart(expenseCtx, {
                    type: 'doughnut',
                    plugins: [doughnutCenterText],
                    data: {
                        labels: expenseData.Labels,
                        datasets: [{
                            data: expenseData.Values,
                            backgroundColor: expenseData.Colors,
                            borderWidth: 2
                        }]
                    },
                    options: {
                        cutout: '70%',
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            doughnutCenterText: { text: defaultExpenseText }
                        },
                        onHover: (event, chartElement) => {
                            if (chartElement.length) {
                                const index = chartElement[0].index;
                                const label = expenseChart.data.labels[index];
                                expenseChart.options.plugins.doughnutCenterText.text = label;
                            } else {
                                expenseChart.options.plugins.doughnutCenterText.text = defaultExpenseText;
                            }
                            expenseChart.update();
                        }
                    }
                });
            } else {
                createPlaceholderChart('expenseChart');
            }

            // --- Income Chart ---
            const incomeData = @Html.Raw(JsonSerializer.Serialize(Model.IncomeChartData));
            if (incomeData.Values.length > 0) {
                const defaultIncomeText = incomeData.Labels[0];
                const incomeCtx = document.getElementById('incomeChart').getContext('2d');
                const incomeChart = new Chart(incomeCtx, {
                    type: 'doughnut',
                    plugins: [doughnutCenterText],
                    data: {
                        labels: incomeData.Labels,
                        datasets: [{
                            data: incomeData.Values,
                            backgroundColor: incomeData.Colors,
                            borderWidth: 2
                        }]
                    },
                    options: {
                        cutout: '70%',
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            doughnutCenterText: { text: defaultIncomeText }
                        },
                        onHover: (event, chartElement) => {
                            if (chartElement.length) {
                                const index = chartElement[0].index;
                                const label = incomeChart.data.labels[index];
                                incomeChart.options.plugins.doughnutCenterText.text = label;
                            } else {
                                incomeChart.options.plugins.doughnutCenterText.text = defaultIncomeText;
                            }
                            incomeChart.update();
                        }
                    }
                });
            } else {
                createPlaceholderChart('incomeChart');
            }
        });
    </script>
}
